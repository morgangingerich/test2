---
title: "notes"
format: html
---

---
title: "Hello, Quarto"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(palmerpenguins)
```

## Meet Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Meet the penguins

![](https://raw.githubusercontent.com/quarto-dev/quarto-web/main/docs/get-started/hello/rstudio/lter_penguins.png){style="float:right;" fig-alt="Illustration of three species of Palmer Archipelago penguins: Chinstrap, Gentoo, and Adelie. Artwork by @allison_horst." width="401"}

The `penguins` data from the [**palmerpenguins**](https://allisonhorst.github.io/palmerpenguins "palmerpenguins R package") package contains size measurements for `{r} nrow(penguins)` penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.

The plot below shows the relationship between flipper and bill lengths of these penguins.

```{r}
#| label: plot-penguins
#| warning: false
#| echo: false

ggplot(penguins, 
       aes(x = flipper_length_mm, y = bill_length_mm)) +
  geom_point(aes(color = species, shape = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(
    title = "Flipper and bill length",
    subtitle = "Dimensions for penguins at Palmer Station LTER",
    x = "Flipper length (mm)", y = "Bill length (mm)",
    color = "Penguin species", shape = "Penguin species"
  ) +
  theme_minimal()
```

---
title: "ggplot2 demo"
author: "Norah Jones"
date: "5/22/2021"
format: 
  html:
    fig-width: 8
    fig-height: 4
    code-fold: true
---

## Air Quality

@fig-airquality further explores the impact of temperature on ozone level.

```{r}
#| label: fig-airquality
#| fig-cap: "Temperature and ozone level."
#| warning: false

library(ggplot2)
ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess")
```

# **Notes and practice (9/12):**

[`filter()`](https://dplyr.tidyverse.org/reference/filter.html) allows you to keep rows based on the values of the columns. The first argument is the data frame. The second and subsequent arguments are the conditions that must be true to keep the row.

[`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) changes the order of the rows based on the value of the columns. It takes a data frame and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each additional column will be used to break ties in the values of the preceding columns.

```{r}
airquality |>
  filter(Ozone>15)
```

```{r}
airquality |>
  arrange(Month,Day)
```

[`distinct()`](https://dplyr.tidyverse.org/reference/distinct.html) finds all the unique rows in a dataset, so technically, it primarily operates on the rows. Most of the time, however, you’ll want the distinct combination of some variables, so you can also optionally supply column names

```{r}
#remove any duplicate rows (there are none in this example)
airquality |>
  distinct()

#find all unique ozone and temperature pairs
airquality |>
  distinct(Ozone,Temp)

#if you want to keep other columns open when filtering for unique rows, use this
airquality |>
  distinct(Ozone,Temp,.keep_all = TRUE)

#lastly, if you want to instead find the number of occurances, use count() instead
airquality |>
  count(Ozone,Temp,sort=TRUE)
```

The job of [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) is to add new columns that are calculated from the existing columns. In the transform chapters, you’ll learn a large set of functions that you can use to manipulate different types of variables.

```{r}
airquality |>
  mutate(
    random = Temp - Ozone,
    random2 = Ozone - Temp * 2
  )
#by default, mutate() places the new columns on the right-hand side of the data set which can sometimes be hard to see. we can use the .before argument to add the variables to the left-hand side
airquality |>
  mutate(
    random = Temp - Ozone,
    random2 = Ozone - Temp *2,
    .before = 1
  )
#note to self; remember to add commas at the end of each line before the next argument
```

[`select()`](https://dplyr.tidyverse.org/reference/select.html) allows you to rapidly zoom in on a useful subset using operations based on the names of the variables

```{r}
#select all columns except those between Solar.R and Wind (inclusive)
airquality |>
  select(!Solar.R:Wind)
```

"The Pipe"- Let's test them working together!

```{r}
#selecting rows with ozone greater than 25, making a new variable called weather that takes into account windchill (and placing it after temp variable), hiding solar radiation so we don't have to look at that, and arranging in descending "weather"
airquality |>
  filter(Ozone>25)|>
  mutate(weather = Temp - Wind, .after = Temp)|>
  select(!Solar.R)|>
  arrange(desc(weather))
```

The most important grouped operation is a summary, which, if being used to calculate a single summary statistic, reduces the data frame to have a single row for each group. In dplyr, this operation is performed by [`summarize()`](https://dplyr.tidyverse.org/reference/summarise.html)

```{r}
#group by month, and summarize average ozone
airquality|>
  group_by(Month)|>
  summarize(
    Average_Ozone = mean(Ozone, na.rm = TRUE)
  )
#do the same thing, but add n() which tells you the number of rows per group. in this example it just shows the number of days in each month, so not super helpful in this case
airquality|>
  group_by(Month)|>
  summarize(
    Average_Ozone = mean(Ozone, na.rm=TRUE),
    n = n()
  )
```

```{r}
#random graph to explore data visualization techniques
airquality|>
  ggplot(aes(x=Temp,y=Ozone))+
  geom_point()+
  geom_smooth(method="lm",se=TRUE)+
  labs(
    title="Temperature and Ozone Levels",
)
```
